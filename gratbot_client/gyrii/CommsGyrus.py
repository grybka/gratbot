
from Gyrus import ThreadedGyrus
from GratbotCommsMk2 import GratbotCommsMk2
import numpy as np
import logging
import time

sim_lidar_scan=[[15, 352.125, 1557.5], [15, 353.5625, 1449.0], [15, 354.921875, 1393.25], [15, 356.21875, 1341.5], [15, 357.578125, 1294.75], [15, 358.953125, 1253.75], [15, 0.265625, 1208.0], [15, 1.640625, 1175.5], [15, 2.96875, 1141.75], [15, 4.375, 1106.5], [15, 5.71875, 1077.0], [15, 7.0, 1050.25], [15, 8.421875, 1023.25], [15, 9.796875, 997.75], [15, 11.03125, 975.75], [15, 12.40625, 955.75], [15, 13.734375, 939.25], [15, 15.125, 918.5], [15, 16.5, 900.0], [15, 17.828125, 889.0], [15, 19.078125, 874.0], [15, 20.4375, 857.25], [15, 21.765625, 847.5], [15, 23.09375, 860.75], [15, 24.484375, 820.0], [15, 25.859375, 764.5], [15, 27.421875, 725.0], [15, 28.859375, 673.5], [15, 30.3125, 634.5], [15, 31.65625, 601.25], [15, 33.265625, 574.0], [15, 34.578125, 546.5], [15, 35.90625, 522.75], [15, 37.359375, 501.75], [15, 38.859375, 483.75], [15, 40.296875, 465.5], [15, 41.5625, 451.25], [15, 42.9375, 436.5], [15, 44.515625, 422.5], [15, 45.828125, 409.25], [15, 47.171875, 399.5], [15, 48.6875, 389.0], [15, 50.015625, 379.5], [15, 51.640625, 369.75], [15, 53.3125, 362.0], [15, 54.328125, 354.0], [15, 55.640625, 348.75], [15, 57.078125, 340.5], [15, 58.421875, 333.75], [15, 60.28125, 329.0], [15, 61.546875, 321.75], [15, 62.796875, 316.75], [15, 64.296875, 312.5], [15, 65.90625, 307.75], [15, 67.359375, 303.75], [15, 68.1875, 301.0], [15, 70.0625, 296.25], [15, 70.84375, 293.0], [15, 72.140625, 289.75], [15, 74.09375, 287.0], [15, 75.5, 283.75], [15, 76.34375, 282.0], [15, 78.3125, 279.5], [15, 79.390625, 277.75], [15, 81.15625, 275.25], [15, 81.9375, 273.0], [15, 83.8125, 272.25], [15, 84.6875, 271.25], [15, 85.890625, 269.75], [15, 87.125, 269.25], [15, 88.765625, 268.25], [15, 89.984375, 266.75], [15, 91.703125, 266.25], [15, 93.25, 265.75], [15, 93.75, 265.25], [15, 95.453125, 265.0], [15, 96.4375, 265.0], [15, 98.59375, 265.0], [15, 98.78125, 265.0], [15, 100.359375, 265.25], [15, 102.546875, 265.75], [15, 103.0, 266.25], [15, 104.578125, 267.0], [15, 106.203125, 268.25], [15, 107.90625, 268.75], [15, 108.953125, 270.0], [15, 109.4375, 271.0], [15, 111.265625, 272.25], [15, 112.09375, 273.25], [15, 113.59375, 276.25], [15, 114.484375, 277.75], [15, 116.453125, 279.75], [15, 116.96875, 281.25], [15, 118.421875, 284.75], [15, 119.8125, 287.0], [15, 121.015625, 290.0], [15, 122.5625, 292.75], [15, 123.34375, 295.25], [15, 125.15625, 299.0], [15, 125.671875, 302.25], [15, 127.53125, 305.75], [15, 128.703125, 310.5], [15, 130.078125, 314.5], [15, 131.375, 319.25], [15, 131.9375, 323.25], [15, 133.53125, 328.5], [15, 134.46875, 333.75], [15, 135.90625, 340.0], [15, 136.765625, 346.5], [15, 138.140625, 353.75], [15, 139.21875, 359.75], [15, 140.609375, 367.5], [15, 141.671875, 375.75], [15, 143.140625, 383.75], [15, 144.484375, 393.25], [15, 145.515625, 402.75], [15, 146.953125, 412.75], [15, 148.015625, 425.0], [15, 149.0, 436.25], [15, 150.390625, 449.0], [15, 151.5, 465.0], [15, 152.875, 481.25], [14, 153.984375, 493.75], [15, 155.046875, 513.25], [12, 156.359375, 534.5], [14, 157.71875, 558.0], [14, 158.75, 581.0], [14, 159.9375, 606.5], [13, 161.125, 635.0], [11, 162.421875, 666.75], [13, 163.640625, 702.75], [9, 164.859375, 745.5], [9, 166.015625, 794.0], [9, 168.390625, 916.75], [9, 170.640625, 1103.25], [14, 174.21875, 1546.25], [15, 175.453125, 1771.75], [15, 176.734375, 1799.0], [15, 178.03125, 1821.5], [15, 179.328125, 1850.5], [15, 180.640625, 1879.75], [15, 181.953125, 1918.0], [15, 183.25, 1947.0], [15, 184.546875, 1985.0], [15, 185.8125, 2028.75], [15, 186.9375, 2062.0], [15, 188.203125, 2110.75], [15, 189.53125, 2157.75], [15, 190.796875, 2205.75], [15, 192.109375, 2244.0], [15, 193.390625, 2321.5], [15, 194.65625, 2394.25], [15, 195.96875, 2473.25], [15, 197.28125, 2543.75], [15, 198.53125, 2655.5], [15, 199.859375, 2731.0], [15, 201.15625, 2807.25], [15, 202.46875, 2869.5], [15, 203.75, 3021.25], [15, 205.03125, 3127.5], [15, 206.328125, 3275.5], [15, 207.625, 3376.75], [15, 208.9375, 3507.0], [15, 210.234375, 3452.5], [15, 211.546875, 3454.75], [15, 212.859375, 3448.5], [15, 214.203125, 3399.25], [15, 215.484375, 3386.5], [15, 216.8125, 3368.75], [15, 218.125, 3354.0], [15, 219.421875, 3340.0], [15, 220.71875, 3312.0], [15, 222.0625, 3280.5], [15, 229.0625, 250.75], [15, 230.078125, 251.0], [15, 231.640625, 250.75], [15, 233.734375, 250.5], [15, 234.046875, 250.0], [15, 235.96875, 250.0], [15, 236.734375, 250.0], [15, 239.453125, 251.0], [10, 243.015625, 3261.75], [15, 244.328125, 3274.5], [15, 245.65625, 3270.0], [15, 246.96875, 3298.5], [15, 248.25, 3314.5], [15, 249.578125, 3328.0], [15, 250.984375, 3315.25], [15, 252.25, 3395.5], [15, 253.578125, 3409.0], [15, 254.90625, 3444.75], [15, 256.203125, 3459.0], [15, 257.515625, 3512.25], [15, 258.828125, 3526.5], [15, 260.203125, 3023.0], [15, 261.5625, 2768.75], [15, 262.90625, 2526.5], [15, 264.265625, 2452.25], [15, 265.609375, 2424.25], [15, 266.921875, 2415.5], [15, 268.234375, 2417.0], [15, 269.53125, 2431.5], [15, 270.828125, 2512.25], [15, 272.125, 2653.5], [15, 273.421875, 2728.25], [15, 274.609375, 2726.25], [15, 275.90625, 2834.5], [15, 277.15625, 3169.5], [15, 278.484375, 3099.5], [15, 279.796875, 3150.0], [13, 281.078125, 3139.25], [10, 282.40625, 3049.75], [15, 283.75, 2991.25], [15, 285.046875, 2911.25], [15, 286.359375, 2886.5], [15, 287.6875, 2809.75], [15, 289.03125, 2762.25], [15, 290.34375, 2741.0], [15, 291.640625, 2686.75], [15, 292.96875, 2639.25], [15, 294.375, 2184.0], [15, 295.6875, 2262.75], [15, 296.984375, 2361.5], [15, 298.25, 2452.75], [15, 299.59375, 2483.5], [15, 300.890625, 2449.5], [15, 302.234375, 2426.0], [15, 303.53125, 2404.25], [15, 304.875, 2390.5], [15, 306.171875, 2357.25], [15, 307.484375, 2353.25], [15, 308.828125, 2335.25], [15, 310.109375, 2329.75], [15, 311.4375, 2309.75], [15, 312.75, 2306.75], [15, 314.046875, 2287.75], [15, 315.390625, 2280.0], [15, 316.984375, 1958.5], [15, 318.328125, 2033.0], [15, 319.65625, 1942.5], [15, 320.9375, 1958.5], [15, 322.25, 1950.0], [15, 323.59375, 1926.25], [15, 324.875, 1926.75], [15, 326.1875, 1920.0], [15, 327.484375, 1931.0], [15, 328.8125, 1948.5], [15, 330.125, 1975.5], [15, 331.421875, 1991.5], [15, 332.765625, 1973.75], [15, 334.015625, 1997.25], [15, 335.3125, 1997.25], [15, 336.71875, 1935.25], [15, 337.984375, 1935.5], [15, 339.296875, 1947.75], [15, 340.609375, 1954.75], [15, 341.875, 1979.0], [15, 342.9375, 2225.0], [15, 344.25, 2093.75], [15, 345.859375, 1968.5], [15, 347.25, 1859.5], [15, 348.609375, 1766.0], [15, 349.9375, 1681.25]]

class CommsGyrus(ThreadedGyrus):
    def __init__(self,broker,simulation_mode=False):
        self.turn_speed=0.6
        self.fb_speed=0.6
        self.simulation_mode=simulation_mode
        if not simulation_mode:
            logging.info("Connecting to Gratbot comms")
            self.gratbot_comms = GratbotCommsMk2("10.0.0.4", 9999)
            self.gratbot_comms.set(["ultrasonic_sensor","update_frequency"],4)
        super().__init__(broker)

    def get_keys(self):
        return [ "clock_pulse","motor_command" ]

    def get_name(self):
        return "CommsUpdateGyrus"

    def read_message(self,message):
        if "clock_pulse" in message:
            if not self.simulation_mode:
                comms_message=self.gratbot_comms.update()
                my_keys=[]
                for key in comms_message:
                    if key != "timestamp":
                        my_keys.append(key)
                comms_message["timestamp"]=time.time() #in case its clock has skew
                self.broker.publish(comms_message,my_keys)
            else: #SIMULATION MODE
                self.broker.publish({"timestamp": time.time(),"magnetometer/b_field": [0,0,0], "lidar/lidar_scan": sim_lidar_scan},["magnetometer/b_field","lidar/lidar_scan"])
        if "motor_command" in message and not self.simulation_mode:
            if message["motor_command"]["type"]=="turn":
                duration=message["motor_command"]["magnitude"]
                self.gratbot_comms.set(["drive","translate"],[0,0,np.sign(duration)*self.turn_speed,abs(duration)])
            if message["motor_command"]["type"]=="ahead":
                duration=message["motor_command"]["magnitude"]
                self.gratbot_comms.set(["drive","translate"],[np.sign(duration)*self.fb_speed,0,0,abs(duration)])
